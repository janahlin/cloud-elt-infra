name: Deploy Infrastructure

on:
  push:
    branches: [ main ]
    paths:
      - 'terraform/**'
      - 'ansible/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod
      cloud_provider:
        description: 'Cloud provider to deploy to'
        required: true
        default: 'azure'
        type: choice
        options:
          - azure
          - oci

jobs:
  plan:
    name: Plan Deployment
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'dev' }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.0.0

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Ansible
        run: pip install ansible

      - name: Configure Azure credentials
        if: ${{ github.event.inputs.cloud_provider == 'azure' || github.event.inputs.cloud_provider == '' }}
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Configure OCI credentials
        if: ${{ github.event.inputs.cloud_provider == 'oci' }}
        run: |
          mkdir -p ~/.oci
          echo "${{ secrets.OCI_CONFIG }}" > ~/.oci/config
          echo "${{ secrets.OCI_PRIVATE_KEY }}" > ~/.oci/private_key.pem
          chmod 600 ~/.oci/private_key.pem

      - name: Create Terraform variables file
        run: |
          cat > terraform/${{ github.event.inputs.environment || 'dev' }}.tfvars << EOF
          cloud_provider = "${{ github.event.inputs.cloud_provider || 'azure' }}"
          environment    = "${{ github.event.inputs.environment || 'dev' }}"
          resource_prefix = "${{ secrets.RESOURCE_PREFIX || 'elt' }}"

          {% if github.event.inputs.cloud_provider == 'azure' || github.event.inputs.cloud_provider == '' %}
          azure_subscription_id = "${{ secrets.AZURE_SUBSCRIPTION_ID }}"
          azure_client_id       = "${{ secrets.AZURE_CLIENT_ID }}"
          azure_client_secret   = "${{ secrets.AZURE_CLIENT_SECRET }}"
          azure_tenant_id       = "${{ secrets.AZURE_TENANT_ID }}"
          azure_location        = "${{ secrets.AZURE_LOCATION || 'eastus2' }}"
          vm_size               = "${{ secrets.AZURE_VM_SIZE || 'Standard_B1s' }}"
          storage_tier          = "${{ secrets.AZURE_STORAGE_TIER || 'Standard_LRS' }}"
          databricks_sku        = "${{ secrets.AZURE_DATABRICKS_SKU || 'standard' }}"
          {% else %}
          oci_tenancy_ocid      = "${{ secrets.OCI_TENANCY_OCID }}"
          oci_user_ocid         = "${{ secrets.OCI_USER_OCID }}"
          oci_fingerprint       = "${{ secrets.OCI_FINGERPRINT }}"
          oci_region            = "${{ secrets.OCI_REGION || 'us-ashburn-1' }}"
          compute_shape         = "${{ secrets.OCI_COMPUTE_SHAPE || 'VM.Standard.E2.1.Micro' }}"
          {% endif %}
          EOF

          sed -i 's/{% if github.event.inputs.cloud_provider == '\''azure'\'' || github.event.inputs.cloud_provider == '\'''\'' %}/\{% if ${{ github.event.inputs.cloud_provider == 'azure' || github.event.inputs.cloud_provider == '' }} %\}/g' terraform/${{ github.event.inputs.environment || 'dev' }}.tfvars
          sed -i 's/{% else %}/\{% else %\}/g' terraform/${{ github.event.inputs.environment || 'dev' }}.tfvars
          sed -i 's/{% endif %}/\{% endif %\}/g' terraform/${{ github.event.inputs.environment || 'dev' }}.tfvars

      - name: Create Ansible vault file
        run: |
          mkdir -p ansible/group_vars/${{ github.event.inputs.environment || 'dev' }}

          cat > ansible/group_vars/${{ github.event.inputs.environment || 'dev' }}/vault.yml << EOF
          azure_subscription_id: "${{ secrets.AZURE_SUBSCRIPTION_ID }}"
          azure_tenant_id: "${{ secrets.AZURE_TENANT_ID }}"
          azure_client_id: "${{ secrets.AZURE_CLIENT_ID }}"
          azure_client_secret: "${{ secrets.AZURE_CLIENT_SECRET }}"

          oci_tenancy_ocid: "${{ secrets.OCI_TENANCY_OCID }}"
          oci_user_ocid: "${{ secrets.OCI_USER_OCID }}"
          oci_fingerprint: "${{ secrets.OCI_FINGERPRINT }}"

          db_username: "${{ secrets.DB_USERNAME }}"
          db_password: "${{ secrets.DB_PASSWORD }}"

          notification_emails:
            - "${{ secrets.NOTIFICATION_EMAIL }}"
          EOF

          # Create environment-specific vault password file
          echo "${{ secrets.VAULT_PASSWORD }}" > .vault_pass_${{ github.event.inputs.environment || 'dev' }}.txt
          chmod 600 .vault_pass_${{ github.event.inputs.environment || 'dev' }}.txt

          ansible-vault encrypt --vault-id ${{ github.event.inputs.environment || 'dev' }}@.vault_pass_${{ github.event.inputs.environment || 'dev' }}.txt ansible/group_vars/${{ github.event.inputs.environment || 'dev' }}/vault.yml

      - name: Terraform Init
        run: |
          cd terraform
          terraform init

      - name: Terraform Plan
        run: |
          cd terraform
          terraform plan -var-file="${{ github.event.inputs.environment || 'dev' }}.tfvars" -out=tfplan

      - name: Archive Terraform plan
        uses: actions/upload-artifact@v3
        with:
          name: terraform-plan
          path: terraform/tfplan
          retention-days: 5

  deploy:
    name: Deploy Infrastructure
    needs: plan
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'dev' }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.0.0

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Ansible
        run: pip install ansible

      - name: Configure Azure credentials
        if: ${{ github.event.inputs.cloud_provider == 'azure' || github.event.inputs.cloud_provider == '' }}
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Configure OCI credentials
        if: ${{ github.event.inputs.cloud_provider == 'oci' }}
        run: |
          mkdir -p ~/.oci
          echo "${{ secrets.OCI_CONFIG }}" > ~/.oci/config
          echo "${{ secrets.OCI_PRIVATE_KEY }}" > ~/.oci/private_key.pem
          chmod 600 ~/.oci/private_key.pem

      - name: Create Ansible vault file
        run: |
          mkdir -p ansible/group_vars/${{ github.event.inputs.environment || 'dev' }}

          cat > ansible/group_vars/${{ github.event.inputs.environment || 'dev' }}/vault.yml << EOF
          azure_subscription_id: "${{ secrets.AZURE_SUBSCRIPTION_ID }}"
          azure_tenant_id: "${{ secrets.AZURE_TENANT_ID }}"
          azure_client_id: "${{ secrets.AZURE_CLIENT_ID }}"
          azure_client_secret: "${{ secrets.AZURE_CLIENT_SECRET }}"

          oci_tenancy_ocid: "${{ secrets.OCI_TENANCY_OCID }}"
          oci_user_ocid: "${{ secrets.OCI_USER_OCID }}"
          oci_fingerprint: "${{ secrets.OCI_FINGERPRINT }}"

          db_username: "${{ secrets.DB_USERNAME }}"
          db_password: "${{ secrets.DB_PASSWORD }}"

          notification_emails:
            - "${{ secrets.NOTIFICATION_EMAIL }}"
          EOF

          # Create environment-specific vault password file
          echo "${{ secrets.VAULT_PASSWORD }}" > .vault_pass_${{ github.event.inputs.environment || 'dev' }}.txt
          chmod 600 .vault_pass_${{ github.event.inputs.environment || 'dev' }}.txt

          ansible-vault encrypt --vault-id ${{ github.event.inputs.environment || 'dev' }}@.vault_pass_${{ github.event.inputs.environment || 'dev' }}.txt ansible/group_vars/${{ github.event.inputs.environment || 'dev' }}/vault.yml

      - name: Download Terraform plan
        uses: actions/download-artifact@v3
        with:
          name: terraform-plan
          path: terraform/

      - name: Terraform Init
        run: |
          cd terraform
          terraform init

      - name: Terraform Apply
        run: |
          cd terraform
          terraform apply -auto-approve tfplan

      - name: Create Ansible inventory
        run: |
          mkdir -p ansible/inventories/${{ github.event.inputs.environment || 'dev' }}

          echo "${{ secrets.ANSIBLE_INVENTORY }}" > ansible/inventories/${{ github.event.inputs.environment || 'dev' }}/hosts.yml

      - name: Run Ansible for Post-Deployment Configuration
        run: |
          ansible-playbook -i ansible/inventories/${{ github.event.inputs.environment || 'dev' }}/hosts.yml \
            --vault-id ${{ github.event.inputs.environment || 'dev' }}@.vault_pass_${{ github.event.inputs.environment || 'dev' }}.txt \
            ansible/playbooks/setup_controller.yml
