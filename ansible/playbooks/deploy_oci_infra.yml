---
- name: Setup Controller VM for OCI
  hosts: localhost
  connection: local
  become: true
  vars:
    cloud_provider: "oci"
    # Hardcode the environment value to avoid recursive loops
    env_name: "dev"
    vault_file: "{{ playbook_dir }}/../group_vars/{{ env_name }}/vault.yml"
    ansible_user: "{{ lookup('env', 'USER') }}"
    # Map vault variables to expected variable names
    oci_tenancy_ocid: "{{ vault_oci_tenancy_ocid }}"
    oci_user_ocid: "{{ vault_oci_user_ocid }}"
    oci_fingerprint: "{{ vault_oci_fingerprint }}"
    # Include non-sensitive variables from all/vars.yml
    oci_region: "{{ oci_region }}"
  vars_files:
    - "{{ vault_file | default(omit) }}"
    - "{{ playbook_dir }}/../group_vars/all/vars.yml"
  roles:
    - common
    - terraform
    - oci_tools
    - python_tools
    - controller_setup
  post_tasks:
    - name: Read local SSH public key
      slurp:
        src: "/home/{{ ansible_user }}/.ssh/id_rsa.pub"
      register: ssh_public_key
      become: false

- name: Setup SSH Access
  hosts: controller
  connection: local
  gather_facts: false
  vars:
    ansible_user: "{{ lookup('env', 'USER') }}"
  tasks:
    - name: Ensure .ssh directory exists
      file:
        path: "/home/{{ ansible_user }}/.ssh"
        state: directory
        mode: '0700'
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
      become: true

    - name: Add SSH public key to authorized_keys
      authorized_key:
        user: "{{ ansible_user }}"
        key: "{{ hostvars['localhost']['ssh_public_key']['content'] | b64decode }}"
        state: present
      become: true

- name: Deploy OCI Infrastructure
  hosts: controller
  connection: local
  become: false  # Run as the ansible_user to use configured credentials
  vars:
    cloud_provider: "oci"
    terraform_dir: "/opt/cloud-elt-infra/terraform"
    # Hardcode the environment value to avoid recursive loops
    env_name: "dev"
    vault_file: "{{ playbook_dir }}/../group_vars/{{ env_name }}/vault.yml"
    ansible_user: "{{ lookup('env', 'USER') }}"
  vars_files:
    - "{{ vault_file | default(omit) }}"
    - "{{ playbook_dir }}/../group_vars/all/vars.yml"
  pre_tasks:
    - name: Set OCI environment variables
      set_fact:
        oci_env:
          OCI_TENANCY_OCID: "{{ vault_oci_tenancy_ocid }}"
          OCI_USER_OCID: "{{ vault_oci_user_ocid }}"
          OCI_FINGERPRINT: "{{ vault_oci_fingerprint }}"
          OCI_REGION: "{{ oci_region | default('eu-stockholm-1') }}"
          ENVIRONMENT: "{{ env_name }}"
          COMPUTE_SHAPE: "{{ compute_shape | default('VM.Standard.E2.1.Micro') }}"

    - name: Export OCI environment variables
      shell: |
        export OCI_TENANCY_OCID="{{ vault_oci_tenancy_ocid }}"
        export OCI_USER_OCID="{{ vault_oci_user_ocid }}"
        export OCI_FINGERPRINT="{{ vault_oci_fingerprint }}"
        export OCI_REGION="{{ oci_region | default('eu-stockholm-1') }}"
        export ENVIRONMENT="{{ env_name }}"
        export COMPUTE_SHAPE="{{ compute_shape | default('VM.Standard.E2.1.Micro') }}"

    - name: Ensure /opt/cloud-elt-infra directory exists
      file:
        path: "/opt/cloud-elt-infra"
        state: directory
        mode: '0755'
      become: true

    - name: Ensure terraform directory exists in /opt
      file:
        path: "/opt/cloud-elt-infra/terraform"
        state: directory
        mode: '0755'
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
      become: true

    # Generate terraform.tfvars directly in the active Terraform directory
    - name: Generate terraform.tfvars from template
      template:
        src: "{{ playbook_dir }}/../templates/terraform.tfvars.j2"
        dest: "{{ terraform_dir }}/terraform.tfvars"
        mode: '0600'
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
      environment: "{{ oci_env }}"
      register: tfvars_result
      no_log: false  # Temporarily disable no_log to see the error

    - name: Debug terraform.tfvars generation
      debug:
        msg: "Terraform.tfvars generation result: {{ tfvars_result }}"
      when: tfvars_result is failed
  roles:
    - role: infrastructure_deploy
      environment: "{{ oci_env }}"
